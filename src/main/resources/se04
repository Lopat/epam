public class ByteReader {

abstract
abstract
abstract
abstract
abstract
abstract
abstract
abstract
abstract
abstract
abstract
abstract
    public static void main(String[] args) throws IOException {

        byte[] file;
        InputStream is = null;
        OutputStream fos = null;
        public public public public public public public

        try {
            is = ByteReader.class.getResourceAsStream("/se04");
            fos = new FileOutputStream("./src/main/resources/se04output");

            file = new byte[is.available()];
            is.read(file);
            
            Map<String, Integer> map = keywordsFind(file);
            
            for(Map.Entry<String, Integer> pair : map.entrySet()){
                fos.write((pair.getKey()+ " : " + pair.getValue()).getBytes());
            }


        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (null != is) is.close();
            if (null != fos) fos.close();
        }
    }

    private static Map <String, Integer> keywordsFind(byte[] file) {

        Map <String, Integer> keywords = new HashMap <>();

        String s = new String(file, Charset.forName("UTF-8"));
        String words = "abstract	continue for new switch" + " assert	default	goto	package	synchronized" + "boolean	do	if	private	this" + "break	double	implements	protected	throw" + "byte	else	import	public	throws" + "case	enum	instanceof	return	transient" + "catch	extends	int	short	try" + "char	final	interface	static	void" + "class	finally	long	strictfp volatile" + "const	float	native	super	while";

        for (String word : words.split(" ")) {
            if (keywords.containsKey(word)) {
                int k = keywords.get(word);
                keywords.put(word, ++k);
            } else keywords.put(word, 1);
        }

        return keywords;
    }
}
