~~~~~List~~~~~
Представляет собой список элементов. Элементы хранятся упорядоченно.
Доступ к элементам списка может осуществляться по индексу.
Допускает хранение дубликатов.

~~~~~Использование~~~~~
ArrayList - список на основе массива, лучше всего справляется с доступом по индексу.
            При этом удаление и вставка в середине списка выполняются медленно,
            в связи с необходимостью смены индексов всех послестоящих элементов.
LinkedList - связный список, элементы коллеции хранят ссылки на своих соседей.
            Малоэффективен в доступе по индексу, т.к. для этого используется перебор всех элементов.
            При этом вставка и удаление выполняются быстро, т.к. для этого достаточно перенаправить
            ссылки соседних элементов.

~~~~~Методы~~~~~
boolean add(Object o) - добавляет объект о в коллекцию
Object remove(int i) - удаляет объект в коллекции по индексу.
Object get(int i) - получает объект из коллекции по индексу.
int indexOf(Object o) - получает индекс переданного объекта.
Object set(int i, Object o) - назначает объект в коллекцию по индексу i.
void clear( ) - очищает коллекцию.
boolean contains(Object o) - проверка, содержит ли коллекция объект.
boolean isEmpty( )  - проверка, пуста ли коллекция.
Iterator iterator( ) - возвращает итератор.
int lastIndexOf(Object o) - возвращает индекс последнего вхождения элемента.
int size( ) - возвращает размер коллекции.
List subList(int i, int p) - возвращает список с i по p индекс элемента.
Object[] toArray( ) - преобразует коллекцию кк массиву.
boolean remove(Object o) - удаляет объект о из коллекции.
boolean removeAll(Collection c) - удаляет все элементы другой коллекции из текущей.
boolean retainAll(Collection c) - (retain — сохранить). Выполняет операцию "пересечение множеств".
void sort(Comparator c) - сортирует коллекцию компаратором c.
