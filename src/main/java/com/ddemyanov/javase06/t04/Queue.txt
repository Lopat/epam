~~~~~Queue~~~~~
Очередь. Представляет собой структуру данных, работающую по принципу FIFO.
Однако, существуют и реализации на принципе LIFO и двунаправленные очереди

~~~~~Использование~~~~~
PriorityQueue - FIFO. Единственная прямая реализация интерфейса.
                        Поддерживает возможность управления порядком элементов с помощью компаратора.
ArrayDeque - реализует принцип LIFO. Это реализация с использованием массива,
                хотя обращение по индексу массива исключено.
LinkedQueue - FIFO. Элементы очереди имеют ссылки друг на друга.

~~~~~Методы~~~~~
Object element( ) - возвращает, но не удаляет верхушку очереди.
Object peek( )- возвращает, но не удаляет верхушку очереди.
boolean offer(Object о) - добавляет объект в очередь
boolean add(Object о) - добавляет объект в очередь
Object remove( ) - удаляет верхушку очереди и возвращает ее.
Object poll( ) - удаляет верхушку очереди и возвращает ее.
boolean remove(Object о) - удаляет объект из коллекции.
void clear( ) - очищает коллекцию.
boolean contains(Object о) - проверяет, содержит ли коллекция объект.
boolean isEmpty( ) - проверяет пустоту коллекции.
Iterator iterator( ) - возвращает итератор.
int size( ) - возвращает размер коллекции.
Object[] toArray( ) - преобразует в массив.
boolean remove(Object o) - удаляет объект о из коллекции.
boolean removeAll(Collection c) - удаляет все элементы другой коллекции из текущей.
boolean retainAll(Collection c) - (retain — сохранить). Выполняет операцию "пересечение множеств".