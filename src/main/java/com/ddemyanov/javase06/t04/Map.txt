~~~~~Map~~~~~
Представляет собой коллекцию с набором элементов типа пара ключ-значение.
Доступ к значению происходит через ключ. В большинстве реализаций запрещены
дубли ключевых значений, при этом значения в наборе значений могут дублироваться.

~~~~~Использование~~~~~
HashMap - структура данных для хранения связанных вместе пар "ключ-значение",
            внутри пары сортируются по "бакетам" по функции хеш-кода.
TreeMap - реализация с отсортированными ключами (сортировка при внесении в коллекцию)
EnumMap - реализация с ключами, относящимися к перечислимому типу
LinkedHashMap - реализация с запоминанием порядка, в котором добавлялись элементы
WeakHashMap - реализация со значениями, которые могут удаляться сборщиком мусора, если они больше не используются
IdentityHasMap - реализация с ключами, сравниваемыми с помощью операции == вместо метода equals()

~~~~~Методы~~~~~
Object remove(Object )
boolean remove(Object,Object )
Object get(Object )
Object put(Object, Object )
boolean equals(cObject )
Collection values( )
int hashCode( )
void clear( )
boolean isEmpty( )
Object replace(Object, Object )
boolean replace(Object, Object, Object )
void replaceAll(BiFunction )
int size( )
Set entrySet( )
void putAll(Map )
Object putIfAbsent(Object, Object )
Set keySet( )
Object compute(Object, BiFunction )
Object computeIfAbsent(Object, Function )
Object computeIfPresent(Object, BiFunction )
boolean containsKey(Object )
boolean containsValue(Object )
void forEach(BiConsumer )
Object getOrDefault(Object, Object )
Object merge(Object, Object, BiFunction )
